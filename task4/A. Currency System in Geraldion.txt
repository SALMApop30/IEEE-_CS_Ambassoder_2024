#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric> // for gcd
using namespace std;


int calculateGCD(const vector<int>& numbers) {
    int current_gcd = numbers[0];
    for (size_t i = 1; i < numbers.size(); ++i) {
        current_gcd = gcd(current_gcd, numbers[i]);
        if (current_gcd == 1) {
            break; // Early exit if GCD is 1
        }
    }
    return current_gcd;
}

int main() {
    int n;
    cin >> n;
    
    vector<int> banknotes(n);
    for (int i = 0; i < n; ++i) {
        cin >> banknotes[i];
    }
    
  
    int overall_gcd = calculateGCD(banknotes);
    
    if (overall_gcd > 1) {
        cout << -1 << endl;
        return 0;
    }
    
   
    const int LIMIT = 1000000; // Arbitrary large limit
    vector<bool> can_be_formed(LIMIT + 1, false);
    can_be_formed[0] = true; // 0 sum can always be formed
    
    for (int i = 1; i <= LIMIT; ++i) {
        for (int banknote : banknotes) {
            if (i >= banknote && can_be_formed[i - banknote]) {
                can_be_formed[i] = true;
                break;
            }
        }
    }
    
    for (int i = 1; i <= LIMIT; ++i) {
        if (!can_be_formed[i]) {
            cout << i << endl;
            return 0;
        }
    }
    

    cout << -1 << endl;
    return 0;
}
